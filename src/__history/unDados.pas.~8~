unit unDados;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  IniFiles, unConexao, Controls, Vcl.Dialogs, generics.collections, Rtti,
  unAtributos;

type
  TDM = class(TDataModule)
    FDConnection1: TFDConnection;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure conectaDatabase();
  end;

  TORM<T> = class
    private
      FVal: T;
    public
      function listar():TList<T>;
      procedure update(val:T);
      procedure insert(val:T);      
  end;

var
  DM: TDM;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDM.conectaDatabase;
var
  ini: TIniFile;
begin
  ini := TIniFile.Create(StringReplace(ParamStr(0),'.exe','.ini',[]));
  FDConnection1.Close;
  while (not FDConnection1.Connected) do
  begin
    FDConnection1.Params.Database := ini.ReadString('DATABASE','Path', StringReplace(ParamStr(0),'.exe','.fdb',[]));
    FDConnection1.Params.UserName := ini.ReadString('DATABASE','Username','SYSDBA');
    FDConnection1.Params.Password := ini.ReadString('DATABASE','Password','masterkey');
    try
      FDConnection1.Open;
    except
      if (MessageDlg('Não foi possível estabelecer uma conexão com o banco de dados. Deseja rever os parâmetros de configuração?',mtConfirmation,[mbYes, mbNo], 0) = mrYes) then
        frmConexao.ShowModal
      else
        break;
    end;
  end;
end;


procedure TDM.DataModuleCreate(Sender: TObject);
begin
  conectaDatabase;
end;

{ TORM<T> }

procedure TORM<T>.insert(val: T);
begin
//
end;

function TORM<T>.listar: TList<T>;
var
  lst: TList<T>;
  lContext: TRttiContext;
  lType: TRttiType;
  lProperty: TRttiProperty;
  lAttribute: TCustomAttribute;
  lIsDataTable: boolean;
begin
  lIsDataTable := false;
  lContext := TRttiContext.Create;
  lType := lContext.GetType();
  for lAttribute in lType.GetAttributes do
  begin               
    if (lAttribute is TDataTableAttribute) then
    
  end;
    
end;

procedure TORM<T>.update(val: T);
begin
//
end;

end.
